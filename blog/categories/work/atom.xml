<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Work | Dd's home]]></title>
  <link href="http://dongd.info/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://dongd.info/"/>
  <updated>2021-06-16T19:39:54+08:00</updated>
  <id>http://dongd.info/</id>
  <author>
    <name><![CDATA[Dong Du]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Hook加强代码文档的尝试]]></title>
    <link href="http://dongd.info/blog/2020/12/09/git-hookjia-qiang-dai-ma-wen-chang-shi/"/>
    <updated>2020-12-09T15:16:09+08:00</updated>
    <id>http://dongd.info/blog/2020/12/09/git-hookjia-qiang-dai-ma-wen-chang-shi</id>
    <content type="html"><![CDATA[<h2>Motivation</h2>

<p>给自己的代码写文档是件很容易被忽略的事情。
不过没有文档的话，不管是为了事后维护项目，还是帮助后续参与进来合作的小伙伴来说，都是很麻烦的事情。</p>

<p>这篇Blog是一个<strong>非常简单的</strong>用git hook中的pre-commit来做检查，强制对code和doc同时更新的一个小实验吧。</p>

<h2>Design</h2>

<h3>显示的文档清单</h3>

<p>显示的文档清单，记录代码文件（比如.c, .h文件）和他们对应的文档文件（比如某.md）。</p>

<p>在git commit的时候，脚本去检查是否修改了该清单上的代码文件，如果有。
那么要么对应的文档文件也有更新，要么在commit的时候传入参数显示的告知脚本某些文档文件不需要更新。</p>

<h3>为撒这么设计？</h3>

<p>虽然文档很重要，但是对于大型项目，特别是在别人的系统上二次开发时，我们很难显示指定要对所有的代码文件做文档管理的。
（当然，如果能做到这肯定是件很好的事情）。
所以该清单其实是指定的一个要检查的列表。
这样，我们可以在创建新的相关的代码的时候，去更新该list和代码对应的文档。
后续的对代码的修改会通过脚本来提示我们需要去更新对应的文档内容。</p>

<h2>Implementation</h2>

<p>Demo的<a href="https://github.com/Ddnirvana/codeWithDoc.git">Github地址</a>。</p>

<p><strong>doclist.json</strong>:
<code>
{
        "hello.c" : "docs/helloworld.md",
        "world.c" : "helloworld.md",
        "bye.c"   : "bye.md"
}
</code></p>

<p>DocList的格式就简单按照Json，一组简单的键值对。
并且现在的假设是，一个代码文件<strong>最多只有一个</strong>对应的文档文件。
而一个文档文件可以被多个代码文件所关联。</p>

<p><strong>precommit的检查</strong>：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>changed_files = []
</span><span class='line'>changed_files_dict = {}
</span><span class='line'>for status, fname in git.status(filter=&ldquo;MA&rdquo;, cached=True):
</span><span class='line'>    if args.verbose:
</span><span class='line'>        print(&ldquo;Checking {}&hellip;&rdquo;.format(fname))
</span><span class='line'>    if check_ignores(fname):
</span><span class='line'>        continue
</span><span class='line'>    changed_files.append(fname)
</span><span class='line'>    changed_files_dict[fname] = 1&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for fname in changed_files:
</span><span class='line'>    doc = doc_of_the_code(fname)
</span><span class='line'>    if (doc!=&lsquo;OMGNoDocFound&rsquo;) and (not changed_files_dict.get(doc)):
</span><span class='line'>        print(&ldquo;Source file: &rdquo;, fname,
</span><span class='line'>                &ldquo;is updated while its doc:&rdquo;, doc,
</span><span class='line'>                &ldquo;is not updated!\n&rdquo;)
</span><span class='line'>        sys.exit(1)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;sys.exit(0)</span></code></pre></td></tr></table></div></figure>
核心代码如上。
简单来说，就是读取修改的文件到一个List和Dict中（可能可以实现得更干净，先不管了），然后和doclist中的代码-文档对进行匹配和检查。
如果发现对应的代码有相关联的文档文件，但是没有同时更新的，就报错。</p>

<p>报错的log通常是：</p>

<pre><code>Source file:  hello.c is updated while its doc: helloworld.md is not updated!
</code></pre>

<h2>Evaluation</h2>

<p>具体效果咋样，过一段时间再来更新~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenWhisk简单介绍与使用]]></title>
    <link href="http://dongd.info/blog/2020/12/03/openwhiskjian-dan-jie-shao-yu-shi-yong/"/>
    <updated>2020-12-03T09:12:18+08:00</updated>
    <id>http://dongd.info/blog/2020/12/03/openwhiskjian-dan-jie-shao-yu-shi-yong</id>
    <content type="html"><![CDATA[<p>说明：真的只是简单介绍，以及简单使用……想了解更详细的，最好的方式还是花点时间去读OpenWhisk的<a href="https://openwhisk.apache.org/documentation.html">文档</a>。</p>

<h2>OpenWhisk简单介绍与使用</h2>

<p>介绍略。</p>

<p>（后面有时间再补吧</p>

<h3>使用</h3>

<h4>环境安装</h4>

<p>安装大体来说分为两步，一步是安装serverless openwhisk平台（服务器端），一步是安装客户端接口。</p>

<p>由于OpenWhisk的脚本、文档等其实都很全了，直接follow官方文档也是很快滴。</p>

<p>文档里面会推荐好几种安装的方式，包括Kubernet，docker compose，等。
这里以单机为例的安装为例，就选择了docker compose。</p>

<p>安装环境的话，我用的系统是：Ubuntu 18.04.5 LTS。</p>

<p>依赖的包（不一定完全）：docker, docker-compose, npm, python3-pip, python3</p>

<p>之后通过以下命令尝试安装：</p>

<pre><code>git clone https://github.com/apache/openwhisk-devtools.git
cd openwhisk-devtools/docker-compose
make quick-start
</code></pre>

<p>提示：中间可能会出现说sh找不到<code>let</code>命令。这个应该和系统的shell类型有关系。不过这里其实不会影响安装，最多会出现很多干扰的log，
可以选择无视或者把Makefile中的对应的let语句改掉。</p>

<p>上面的过程中如果出现某些包没有，自行去找一下安装一下即可。
此外，也有可能因为port被占用导致安装失败，这个时候可以lsof -i -n -P 看一下当前被用的port号。
整个过程成功后，就说明服务端已经安装好，并且openwhisk会默认起来。</p>

<p>第二步是安装客户端程序，wsk。这步其实很简单，如果没有改wsk的需求的话直接安装官方提供的<a href="https://github.com/apache/openwhisk-cli/releases">binary</a>就好。
下载好后，解压，放在PATH路径可以找得到的地方。</p>

<h4>简单运行</h4>

<p>openwhisk支持很多不同的语言，这里以js（node.js)为例。
创建一个hello.js文件，内容如下（这个demo也来自官方教程）：</p>

<pre><code>function main(args) {
const name = args &amp;&amp; args.name || "stranger";
return { greeting: `Hello ${name}!` };
}
</code></pre>

<p>通过命令：</p>

<pre><code>wsk action create helloJS hello.js
</code></pre>

<p>来创建一个helloJS的应用（或function、或OpenWhisk中的action）。</p>

<p>注意1：通过上面安装的过程安装好后，会提示export一个配置文件，</p>

<pre><code>export WSK_CONFIG_FILE=/home/dd/PATH_TO/openwhisk-devtools/docker-compose/.wskprops
</code></pre>

<p>可以把上面的这个配置放到profile中，这样wsk才能找到对应的API Host的IP和端口。</p>

<p>注意2：因为现在只是为了跑起来，还没有考虑安全性，因此直接跑wsk会提示错误。</p>

<p>临时的解决办法是，在所有的wsk命令后加上<code>-i</code>, 表示不考虑安全选项。</p>

<p>即:</p>

<pre><code>wsk -i action create helloJS hello.js
</code></pre>

<p>运行：</p>

<pre><code>wsk action invoke helloJS --result --param name World
</code></pre>

<p>正常情况下应该能够看到function的输出</p>

<h4>wsk的常用命令说明</h4>

<p>TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recommented Courses for System Researchers]]></title>
    <link href="http://dongd.info/blog/2020/11/29/recommented-courses-for-system-researchers/"/>
    <updated>2020-11-29T20:05:19+08:00</updated>
    <id>http://dongd.info/blog/2020/11/29/recommented-courses-for-system-researchers</id>
    <content type="html"><![CDATA[<p>Here is a list of (my personally) recommented courses for system researchers, and the reasons.</p>

<ul>
<li><a href="https://6004.mit.edu/web/fall20/resources/sp20">MIT 6.004: Computation Structure</a>: This course will introduce basic knowledge about modern Processors, and take RISC-V as an example for Labs/Demos. <a href="https://www.youtube.com/watch?v=c23MThWhXMw">Lectures</a> and <a href="https://6004.mit.edu/web/_static/silvina-test/resources/fa19/L14.pdf">Slides</a>.</li>
</ul>


<p>I will update the list when I recall or meet interesting courses.
Besides, if you have interesting courses want to share, just let me know through my email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recommented Websites for System Researchers]]></title>
    <link href="http://dongd.info/blog/2020/11/26/recommented-websites-for-system-researchers/"/>
    <updated>2020-11-26T21:41:08+08:00</updated>
    <id>http://dongd.info/blog/2020/11/26/recommented-websites-for-system-researchers</id>
    <content type="html"><![CDATA[<p>Here is a list of (my personally) recommented websites for system researchers, and the reasons.</p>

<ul>
<li><a href="https://lwn.net/">LWN</a>: LWN presents the news about Linux (and actually more than Linux). It will introduces recent discussions on interesting patches, hot topics on OSes, and quickly reviews on related news. It&rsquo;s strongly recommented to periodically check the website to learn things. All the contents on LWN is free, but you need to be subscriber to get the latest things (If you don&rsquo;t want, just wait 2 weeks).</li>
<li><a href="https://blog.acolyer.org/">The morning papers</a>: It will give a quick introduction on interesting papers. Just follow it and read things you'are interested.</li>
<li><a href="https://www.nextplatform.com/">The Next Platform</a>: You can learn about hardware things, e.g., the newly interconnection designs, on this website.</li>
<li><a href="https://news.ycombinator.com/">Hacker News</a>: News and discussions of a wide topics.</li>
<li><a href="https://www.usenix.org/conferences">Usernix Conference News</a>: Just check the recent events on Usenix conferences. It&rsquo;s always helpful to learn the most reserach topics and technqies :).</li>
<li><a href="https://www.ccf.org.cn/Academic_Evaluation/ARCH_DCP_SS/">CCF recommented conferences/journals</a>.</li>
<li><a href="http://www.cs.technion.ac.il/~dan/index_sysvenues_deadline.html">Deadlines of conferences by Dan Tsafirr</a>: The page list the deadlines for most system conferences. Just following the line!</li>
</ul>


<p>I will update the list when I recall some websites.
Besides, if you have websites want to share, just let me know through my email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello,world]]></title>
    <link href="http://dongd.info/blog/2017/03/30/hello/"/>
    <updated>2017-03-30T00:14:10+08:00</updated>
    <id>http://dongd.info/blog/2017/03/30/hello</id>
    <content type="html"><![CDATA[<p>这是blog的第一篇测试博客。
希望能够坚持下来记录博客的习惯↖(^ω^)↗</p>
]]></content>
  </entry>
  
</feed>
